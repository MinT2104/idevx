generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  role          String    @default("user") // "user" | "admin"
  accounts      Account[]
  sessions      Session[]
  todos         Todo[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Todo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  done      Boolean  @default(false)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Model {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  slug                  String
  type                  String
  description           String?
  logo                  String?
  status                String   @default("active") // "active" | "inactive"
  // New structured fields
  detailedInfo          Json?   // { readme, github, developedBy, modelFamily, useCase, variant, size, license }
  content               Json?   // { type: "markdown"; body: string }
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([type])
  @@index([name])
  @@index([status])
  @@unique([slug])
} 

model BlogPost {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  slug         String   @unique
  locale       String   @default("en")

  title        String
  subtitle     String?
  excerpt      String?
  heroImage    Json?
  cardImage    Json?
  gallery      Json?

  taxonomy     Json     // { categories: string[]; tags?: string[] }
  authors      Json     // Author[]
  content      Json     // { type: "markdown"; body: string }
  richMeta     Json?

  status       String   // "draft" | "scheduled" | "published" | "archived"
  publishedAt  DateTime?
  updatedAt    DateTime? @updatedAt
  scheduledFor DateTime?
  reading      Json?

  featured     Boolean?  @default(false)
  pinned       Boolean?  @default(false)
  experimental Boolean?  @default(false)

  series       Json?
  relations    Json?
  seo          Json?

  createdBy    String?
  updatedBy    String?
  source       String    @default("markdown")

  createdAt    DateTime  @default(now())

  @@index([title])
  @@index([status])
}

model Solution {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   // e.g. "image-processing", "product-study-ai"
  sections  Json               // full sections array as JSON for now
  kind      String?            // optional: "solution" | "product"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([key])
}

model Setting {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  value     Json     // JSON value to store various types of settings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String
  website   String?
  message   String
  status    String   @default("new") // "new" | "read" | "replied" | "archived"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([email])
  @@index([createdAt])
}

model NewsletterSubscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  status    String   @default("active") // "active" | "unsubscribed" | "bounced"
  source    String?  // Track where subscription came from (e.g., "blog", "homepage")
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
}